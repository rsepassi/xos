#!/usr/bin/env sh
set -e

XOS_RELEASE_ZIG=
XOS_RELEASE_BUSYBOX=

tools_dir=$1

[ -e $tools_dir/.ok ] && exit 0

link_internal_tools() {
  # symlink tools
  internal_tools="
  $BUILD_ROOT/cmd/build
  $BUILD_ROOT/tools/fetch
  $BUILD_ROOT/tools/fetch_urltxt
  $BUILD_ROOT/tools/need
  $BUILD_ROOT/tools/pkgid
  $BUILD_ROOT/tools/untar
  "
  for tool in $internal_tools
  do
    ln -s $tool $tools_dir
  done
}

bootstrap0_tools="
grep
cut
sh
sort
sha256sum
shasum
find
rm
mkdir
cat
chmod
env
head
tail
dirname
tar
touch
ln
"

bootstrap1_tools="
$bootstrap0_tools
cp
make
sed
mv
cmp
sleep
tr
od
bzip2
awk
wc
"

if [ -e $tools_dir/.bootstrap0 ]
then
  rm -rf $tools_dir
  mkdir -p $tools_dir
  for tool in $bootstrap0_tools
  do
    srcpath=$(which $tool || echo "")
    if [ -z "$srcpath" ]
    then
      echo "tool $tool does not exist"
      exit 1
    fi
    ln -s $srcpath $tools_dir
  done
  ln -s $(which mktemp) $tools_dir/internal_mktemp
  link_internal_tools
  echo "bootstrap0" > $tools_dir/.xos
elif [ -e $tools_dir/.bootstrap1 ]
then
  zigpath=$(realpath $tools_dir/zig)
  rm -rf $tools_dir
  mkdir -p $tools_dir
  for tool in $bootstrap1_tools
  do
    srcpath=$(which $tool || echo "")
    if [ -z "$srcpath" ]
    then
      echo "tool $tool does not exist"
      exit 1
    fi
    ln -s $srcpath $tools_dir
  done
  ln -s $(which mktemp) $tools_dir/internal_mktemp
  ln -s $zigpath $tools_dir
  link_internal_tools
  echo "bootstrap1" > $tools_dir/.xos
else
  mkdir -p $tools_dir

  if [ -z "$ARCH_HOST" ]
  then
    case $(uname -m) in
      arm64)
        isa=aarch64
        ;;
      x86_64)
        isa=x86_64
        ;;
      *)
        echo "unrecognized arch $(uname -m). set ARCH_HOST="
        exit 1
        ;;
    esac

    case $(uname) in
      Linux)
        os=linux
        ;;
      Darwin)
        os=macos
        ;;
      *)
        echo "unrecognized os $(uname). set ARCH_HOST="
        exit 1
        ;;
    esac

    ARCH_HOST="$isa-$os"
  fi

  if [ -z "$XOS_RELEASE_ZIG" ]
  then
    touch $tools_dir/.bootstrap0
    zigid=$(ARCH_HOST=$ARCH_HOST ARCH= OPT=s $BUILD_ROOT/cmd/build zig)
  else
    zigid=$XOS_RELEASE_ZIG
  fi

  if [ -z "$XOS_RELEASE_BUSYBOX" ]
  then
    ln -s $BUILD_CACHE/$zigid/out/zig $tools_dir
    touch $tools_dir/.bootstrap1
    bbid=$(ARCH= OPT=s $BUILD_ROOT/cmd/build busybox)
  else
    bbid=$XOS_RELEASE_BUSYBOX
  fi

  bbtools="
    mkdir
    ls
    rm
    mv
    cp
    ln
    basename
    dirname
    realpath
    tar
    gzip
    unzip
    wget
    sha256sum
    cat
    cut
    grep
    head
    tail
    which
    env
    touch
    find
    sed
    sleep
    bzip2
    awk
    wc
    xargs
    sort
    uniq
    diff
    chmod
    sh
  "

  rm -rf $tools_dir
  mkdir -p $tools_dir
  for tool in $bbtools
  do
    ln -s $BUILD_CACHE/$bbid/out/bin/busybox $tools_dir/$tool
  done
  ln -s $BUILD_CACHE/$zigid/out/zig $tools_dir

  cat <<EOF > $tools_dir/internal_mktemp
#!/usr/bin/env sh
set -e
$BUILD_CACHE/$bbid/out/bin/busybox mktemp \$@
EOF
  chmod +x $tools_dir/internal_mktemp

  link_internal_tools

  # xos id
  buildfiles="
    cmd/build
    tools/fetch
    tools/fetch_urltxt
    tools/link_tools
    tools/need
    tools/pkgid
    tools/untar
  "
  xosid() {
    echo "$zigid  zig"
    echo "$bbid  busybox"
    sha256sum $(echo $buildfiles | sort)
  }
  xosid > $tools_dir/.xos
  touch $tools_dir/.ok
fi
