diff --git a/include/uv.h b/include/uv.h
index a62b3fa..e86b991 100644
--- a/include/uv.h
+++ b/include/uv.h
@@ -351,6 +351,8 @@ typedef void (*uv_random_cb)(uv_random_t* req,
                              int status,
                              void* buf,
                              size_t buflen);
+typedef int (*uv_process_setup_cb)(uv_handle_t* handle,
+                                   void* data);
 
 typedef enum {
   UV_CLOCK_MONOTONIC,
@@ -1058,6 +1060,8 @@ typedef struct uv_process_options_s {
    */
   uv_uid_t uid;
   uv_gid_t gid;
+
+  uv_process_setup_cb setup_cb;
 } uv_process_options_t;
 
 /*
@@ -1113,7 +1117,9 @@ enum uv_process_flags {
    * search for the exact file name before trying variants with
    * extensions like '.exe' or '.cmd'.
    */
-  UV_PROCESS_WINDOWS_FILE_PATH_EXACT_NAME = (1 << 7)
+  UV_PROCESS_WINDOWS_FILE_PATH_EXACT_NAME = (1 << 7),
+
+  UV_PROCESS_CTTY = (1 << 8)
 };
 
 /*
diff --git a/src/unix/process.c b/src/unix/process.c
index 4812a90..baff4a4 100644
--- a/src/unix/process.c
+++ b/src/unix/process.c
@@ -34,6 +34,7 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <poll.h>
+#include <sys/ioctl.h>
 
 #if defined(__APPLE__)
 # include <spawn.h>
@@ -304,8 +305,9 @@ static void uv__process_child_init(const uv_process_options_t* options,
     uv__write_errno(error_fd);
   }
 
-  if (options->flags & UV_PROCESS_DETACHED)
-    setsid();
+  int sid = 0;
+  if (options->flags & (UV_PROCESS_DETACHED | UV_PROCESS_CTTY))
+    sid = setsid();
 
   /* First duplicate low numbered fds, since it's not safe to duplicate them,
    * they could get replaced. Example: swapping stdout and stderr; without
@@ -369,6 +371,11 @@ static void uv__process_child_init(const uv_process_options_t* options,
       uv__close(close_fd);
   }
 
+  if (options->flags & UV_PROCESS_CTTY) {
+    ioctl(STDIN_FILENO, TIOCSCTTY, 0);
+    tcsetpgrp(STDIN_FILENO, sid);
+  }
+
   if (options->cwd != NULL && chdir(options->cwd))
     uv__write_errno(error_fd);
 
@@ -493,7 +500,7 @@ static int uv__spawn_set_posix_spawn_attrs(
   flags = POSIX_SPAWN_CLOEXEC_DEFAULT |
           POSIX_SPAWN_SETSIGDEF |
           POSIX_SPAWN_SETSIGMASK;
-  if (options->flags & UV_PROCESS_DETACHED) {
+  if (options->flags & (UV_PROCESS_DETACHED | UV_PROCESS_CTTY)) {
     /* If running on a version of macOS where this flag is not supported,
      * revert back to the fork/exec flow. Otherwise posix_spawn will
      * silently ignore the flag. */
@@ -976,7 +983,8 @@ int uv_spawn(uv_loop_t* loop,
                               UV_PROCESS_WINDOWS_HIDE |
                               UV_PROCESS_WINDOWS_HIDE_CONSOLE |
                               UV_PROCESS_WINDOWS_HIDE_GUI |
-                              UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS)));
+                              UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS |
+                              UV_PROCESS_CTTY)));
 
   uv__handle_init(loop, (uv_handle_t*)process, UV_PROCESS);
   uv__queue_init(&process->queue);
diff --git a/src/win/process.c b/src/win/process.c
index 4e94dee..33be96d 100644
--- a/src/win/process.c
+++ b/src/win/process.c
@@ -915,7 +915,8 @@ int uv_spawn(uv_loop_t* loop,
   BOOL result;
   WCHAR* application_path = NULL, *application = NULL, *arguments = NULL,
          *env = NULL, *cwd = NULL;
-  STARTUPINFOW startup;
+  STARTUPINFOEXW startup_ext = {0};
+  STARTUPINFOW* startup = &startup_ext.StartupInfo;
   PROCESS_INFORMATION info;
   DWORD process_flags;
   BYTE* child_stdio_buffer;
@@ -941,7 +942,8 @@ int uv_spawn(uv_loop_t* loop,
                               UV_PROCESS_WINDOWS_HIDE |
                               UV_PROCESS_WINDOWS_HIDE_CONSOLE |
                               UV_PROCESS_WINDOWS_HIDE_GUI |
-                              UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS)));
+                              UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS |
+                              UV_PROCESS_CTTY)));
 
   err = uv__utf8_to_utf16_alloc(options->file, &application);
   if (err)
@@ -1025,18 +1027,18 @@ int uv_spawn(uv_loop_t* loop,
     goto done;
   }
 
-  startup.cb = sizeof(startup);
-  startup.lpReserved = NULL;
-  startup.lpDesktop = NULL;
-  startup.lpTitle = NULL;
-  startup.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
+  startup->cb = sizeof(startup);
+  startup->lpReserved = NULL;
+  startup->lpDesktop = NULL;
+  startup->lpTitle = NULL;
+  startup->dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
 
-  startup.cbReserved2 = uv__stdio_size(child_stdio_buffer);
-  startup.lpReserved2 = (BYTE*) child_stdio_buffer;
+  startup->cbReserved2 = uv__stdio_size(child_stdio_buffer);
+  startup->lpReserved2 = (BYTE*) child_stdio_buffer;
 
-  startup.hStdInput = uv__stdio_handle(child_stdio_buffer, 0);
-  startup.hStdOutput = uv__stdio_handle(child_stdio_buffer, 1);
-  startup.hStdError = uv__stdio_handle(child_stdio_buffer, 2);
+  startup->hStdInput = uv__stdio_handle(child_stdio_buffer, 0);
+  startup->hStdOutput = uv__stdio_handle(child_stdio_buffer, 1);
+  startup->hStdError = uv__stdio_handle(child_stdio_buffer, 2);
 
   process_flags = CREATE_UNICODE_ENVIRONMENT;
 
@@ -1053,9 +1055,9 @@ int uv_spawn(uv_loop_t* loop,
   if ((options->flags & UV_PROCESS_WINDOWS_HIDE_GUI) ||
       (options->flags & UV_PROCESS_WINDOWS_HIDE)) {
     /* Use SW_HIDE to avoid any potential process window. */
-    startup.wShowWindow = SW_HIDE;
+    startup->wShowWindow = SW_HIDE;
   } else {
-    startup.wShowWindow = SW_SHOWDEFAULT;
+    startup->wShowWindow = SW_SHOWDEFAULT;
   }
 
   if (options->flags & UV_PROCESS_DETACHED) {
@@ -1073,6 +1075,30 @@ int uv_spawn(uv_loop_t* loop,
     process_flags |= CREATE_SUSPENDED;
   }
 
+  if (options->flags & UV_PROCESS_CTTY) {
+    process_flags |= EXTENDED_STARTUPINFO_PRESENT;
+    size_t attr_list_size;
+    InitializeProcThreadAttributeList(NULL, 1, 0, &attr_list_size);
+    startup_ext.lpAttributeList = uv__malloc(attr_list_size);
+    if (!startup_ext.lpAttributeList) {
+      err = ERROR_OUTOFMEMORY;
+      goto done;
+    }
+    if (!InitializeProcThreadAttributeList(
+            startup_ext.lpAttributeList, 1, 0, &attr_list_size)) {
+      err = GetLastError();
+      goto done;
+    }
+    if (!options->setup_cb) {
+      err = ERROR_PATH_NOT_FOUND;
+      goto done;
+    }
+    if (options->setup_cb(process, &startup_ext) != 0) {
+      err = GetLastError();
+      goto done;
+    }
+  }
+
   if (!CreateProcessW(application_path,
                      arguments,
                      NULL,
@@ -1081,7 +1107,7 @@ int uv_spawn(uv_loop_t* loop,
                      process_flags,
                      env,
                      cwd,
-                     &startup,
+                     startup,
                      &info)) {
     /* CreateProcessW failed. */
     err = GetLastError();
@@ -1163,6 +1189,7 @@ int uv_spawn(uv_loop_t* loop,
   uv__free(cwd);
   uv__free(env);
   uv__free(alloc_path);
+  if (startup_ext.lpAttributeList) uv__free(startup_ext.lpAttributeList);
 
   if (child_stdio_buffer != NULL) {
     /* Clean up child stdio handles. */
