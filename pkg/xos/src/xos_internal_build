#!/usr/bin/env sh
set -e

usage() {
  cat <<EOF
usage: ARCH= OPT= build pkgname

echoes pkgid on successful build
build artifacts for last successful build available in build/out/

https://github.com/rsepassi/xos

example:
  ARCH=aarch64-linux-musl OPT=s build sqlite

Env vars:
  ARCH= zig target triple, defaults to host
  OPT={Debug, Safe, Fast, Small, 0, 1, 2, 3, fast, s, z} optimization level
  BUILD= directory for build artifacts, defaults to ./build
  PKG= pkg/ directory path, defaults to ./pkg
  DRY={1,0} if 1, log info and exit
EOF
}

argsquote() {
  [ $# = 0 ] && return
  while :
  do
    printf "'"
    printf %s "$1" | sed "s/'/'\\\\''/g"
    shift
    [ $# = 0 ] && break
    printf "' "
  done
  printf "'\n"
}

# get xos/ root directory
get_xosroot() {
  if [ -n "$XOS_ROOT" ]
  then
    echo "$XOS_ROOT"
  else
    script="$0"
    scriptdir=$(dirname "$script")
    while [ ! -e "$scriptdir/.xos" ]
    do
      # internal tools/build
      if [ "$(basename "$scriptdir")" = "tools" ]
      then
        scriptdir=$(dirname "$scriptdir")
        break
      fi

      # external user link
      link=$(readlink "$script" || echo "bad")
      if [ "$link" = "bad" ]
      then
        >&2 echo "could not find xos/ root directory"
        exit 1
      fi

      if [ -n "${link%%/*}" ]
      then
        script="$scriptdir/$link"
        scriptdir=$(dirname "$script")
      else
        script="$link"
        scriptdir=$(dirname "$link")
      fi
    done
    realpath "$scriptdir"
  fi
}

get_buildroot() {
  if [ -n "$XOS_BUILD_ROOT" ]
  then
    echo "$XOS_BUILD_ROOT"
  elif [ -n "$BUILD" ]
  then
    realpath "$BUILD"
  else
    echo "$PWD/build"
  fi
}

# get pkg dir
get_pkgroot() {
  if [ -n "$XOS_PKG_ROOT" ]
  then
    echo "$XOS_PKG_ROOT"
  elif [ -n "$PKG" ]
  then
    realpath "$PKG"
  elif [ -d "$PWD/pkg" ]
  then
    echo "$PWD/pkg"
  else
    >&2 echo "could not find ./pkg dir. specify PKG= or run next to a pkg/ dir."
  fi
}

get_deps() {
  depstxt="$1"
  arch="$2"
  deps=""
  while IFS= read -r dep; do
    depid="$(ARCH="$arch" xos_internal_build "$dep")"
    deps="$deps$depid  $dep\n"
  done < "$depstxt"
  echo "$deps"
}

get_static_deps() {
  get_deps "$1" $ARCH
}

get_tool_deps() {
  get_deps "$1" $ARCH_HOST
}

link_deps() {
  deps="$1"
  depdir="$2"
  mkdir -p "$depdir"

  tmpf="$BUILD_OUT/tmp/depsids.txt"
  printf "$deps\n" > "$tmpf"

  while IFS= read -r line
  do
    depid=$(echo $line | cut -d' ' -f1)
    depname=$(echo $line | cut -d' ' -f2)
    ln -s "$XOS_BUILD_CACHE/$depid/out" "$depdir/$depname"
  done < "$tmpf"

  IFS="$oldifs"
}

stale_dyndeps() {
  dyndeps="$1"
  while IFS= read -r line
  do
    [ -z "$line" ] && continue
    depid=$(echo $line | cut -d' ' -f1)
    depname=$(echo $line | cut -d' ' -f2)
    depargs=$(echo $line | cut -d' ' -f3-)
    depid2=$(eval "xos_internal_build $depargs")
    [ "$depid" != "$depid2" ] && return 0
  done < "$dyndeps"
  return 1
}

get_arch_host() {
  if [ -n "$ARCH_HOST" ]
  then
    echo "$ARCH_HOST"
    return
  fi

  if which zig > /dev/null
  then
    zig targets | grep "\"triple\"" | cut -d '"' -f4
    return
  fi

  if [ -e "$XOS_ROOT/.xos_host" ]
  then
    cat "$XOS_ROOT/.xos_host"
    return
  fi

  >&2 echo "could not determine ARCH_HOST, please set manually"
  exit 1
}

# script start

[ "$#" = 0 ] && { usage; exit 1; }
[ "$V" = 1 ] && set -x

# get directories
export XOS_ROOT="$(get_xosroot)"
export XOS_BUILD_ROOT="$(get_buildroot)"
export XOS_PKG_ROOT="$(get_pkgroot)"
XOS_BUILD_CACHE="$XOS_BUILD_ROOT/cache"

# determine package
pkg=$1
ARGS="$(argsquote "$@")"
BUILD_PKG="$XOS_PKG_ROOT/$pkg"
if [ ! -e "$BUILD_PKG/build.sh" ]
then
  >&2 echo "unrecognized pkg $pkg, missing build.sh"
  exit 1
fi

# local tools
tools_dir="$XOS_BUILD_CACHE/tools"
[ -e "$tools_dir/.ok" ] || \
  "$XOS_ROOT/tools/xos_internal_link_tools" "$tools_dir"

# seal up PATH
# needs to happen after xos_internal_link_tools so that it can read the
# system PATH
export PATH="$XOS_ROOT/tools"

# Host and target ARCH
export ARCH_HOST=$(get_arch_host)
export ARCH=${ARCH:-$ARCH_HOST}
ARCH_HOST_ISA=$(echo "$ARCH_HOST" | cut -d '-' -f1)
ARCH_HOST_OS=$(echo "$ARCH_HOST" | cut -d '-' -f2 | cut -d '.' -f1)
ARCH_ISA=$(echo "$ARCH" | cut -d '-' -f1)
ARCH_OS=$(echo "$ARCH" | cut -d '-' -f2 | cut -d '.' -f1)

# Optimizaton
OPT=${OPT:-s}
case $OPT in
  0|Debug)
    OPT=0
    OPT_ZIG=Debug
    ;;
  1|Safe)
    OPT=1
    OPT_ZIG=ReleaseSafe
    ;;
  2|Fast)
    OPT=2
    OPT_ZIG=ReleaseFast
    ;;
  Small)
    OPT=s
    OPT_ZIG=ReleaseSmall
    ;;
  3|fast)
    OPT_ZIG=ReleaseFast
    ;;
  s|z)
    OPT_ZIG=ReleaseSmall
    ;;
  *)
    >&2 echo "unrecognized OPT=$OPT"
    exit 1
    ;;
esac
export OPT
export OPT_ZIG

[ -e "$BUILD_PKG/deps.txt" ] && \
  deps_static=$(get_static_deps "$BUILD_PKG/deps.txt")
[ -e "$BUILD_PKG/tooldeps.txt" ] && \
  deps_tools=$(get_tool_deps "$BUILD_PKG/tooldeps.txt")

# xos version
[ -n "$XOS_ID" ] || export XOS_ID="$(cat "$XOS_ROOT/.xos_id")"

# identify pkg id
pkgid_text=$(
  XOS="$XOS_ID" \
  BUILD_PKG="$BUILD_PKG" \
  ARCH="$ARCH" \
  OPT="$OPT" \
  ARGS="$ARGS" \
  DEPS="$deps_static" \
  TOOLDEPS="$deps_tools" \
  "$XOS_ROOT/tools/xos_internal_pkgid" "$pkg"
)
pkgid="$(echo "$pkgid_text" | sha256sum | cut -d ' ' -f1)"
BUILD_OUT="$XOS_BUILD_CACHE/$pkgid"

if [ -e "$BUILD_OUT/.ok" ]
then
  if [ -e "$BUILD_OUT/dyndeps.txt" ] && stale_dyndeps "$BUILD_OUT/dyndeps.txt"
  then
    rebuild=1
  else
    rebuild=0
  fi
else
  rebuild=1
fi

if [ "$DRY" = 1 ]
then
  >&2 cat <<EOF
---
build $ARGS
BUILD_PKG=$BUILD_PKG
BUILD_OUT=$BUILD_OUT
ARCH=$ARCH
ARCH_ISA=$ARCH_ISA
ARCH_OS=$ARCH_OS
ARCH_HOST=$ARCH_HOST
ARCH_HOST_ISA=$ARCH_HOST_ISA
ARCH_HOST_OS=$ARCH_HOST_OS
OPT=$OPT
OPT_ZIG=$OPT_ZIG
XOS_ROOT=$XOS_ROOT
XOS_PKG_ROOT=$XOS_PKG_ROOT
XOS_BUILD_ROOT=$XOS_BUILD_ROOT
XOS_BUILD_CACHE=$XOS_BUILD_CACHE
XOS_ID=$XOS_ID
PATH=$PATH
rebuild?=$rebuild
---
EOF
  echo "$pkgid"
  exit 0
fi

# build if necessary
if [ "$rebuild" = 1 ]
then
  rm -rf "$BUILD_OUT"
  mkdir -p "$BUILD_OUT/out" "$BUILD_OUT/tmp"
  echo "$pkgid_text" > "$BUILD_OUT/pkgid"

  # link static deps
  BUILD_DEPS="$BUILD_OUT/deps"
  [ -e "$BUILD_PKG/deps.txt" ] && \
    link_deps "$deps_static" "$BUILD_DEPS"

  # link tool deps
  BUILD_TOOLDEPS="$BUILD_OUT/tooldeps"
  [ -e "$BUILD_PKG/tooldeps.txt" ] && \
    link_deps "$deps_tools" "$BUILD_TOOLDEPS"

  # pkg-specific tools
  pkg_tools_dir="$BUILD_OUT/tools"
  mkdir -p "$pkg_tools_dir"
  cat <<EOF > "$pkg_tools_dir/mktemp"
#!/usr/bin/env sh
set -e
xos_internal_mktemp \$@ "$BUILD_OUT/tmp/tmpXXXXXX"
EOF
  chmod +x "$pkg_tools_dir/mktemp"

  # setup log and fail fn
  logfile="$BUILD_OUT/build.log"
  fail() {
    [ "$DEBUG" != 1 ] && >&2 cat "$logfile"
    >&2 printf "\nerror building pkg $pkg $pkgid\n"
    exit 1
  }

  # run build script
  cd "$BUILD_OUT/tmp"
  script="$BUILD_PKG/build.sh"
  (
    if [ "$DEBUG" != 1 ]
    then
      exec > "$logfile"
    fi
    env -i \
      DRY="$DRY" \
      DEBUG="$DEBUG" \
      PATH="$pkg_tools_dir:$tools_dir:$XOS_ROOT/tools" \
      HOME="$BUILD_OUT/tmp" \
      USER="xos" \
      XDG_CACHE_HOME="$XOS_BUILD_CACHE/xdg" \
      XOS_ROOT="$XOS_ROOT" \
      XOS_PKG_ROOT="$XOS_PKG_ROOT" \
      XOS_BUILD_ROOT="$XOS_BUILD_ROOT" \
      XOS_BUILD_CACHE="$XOS_BUILD_CACHE" \
      XOS_BUILD_OUT="$BUILD_OUT" \
      ARCH="$ARCH" \
      ARCH_ISA="$ARCH_ISA" \
      ARCH_OS="$ARCH_OS" \
      ARCH_HOST="$ARCH_HOST" \
      ARCH_HOST_ISA="$ARCH_HOST_ISA" \
      ARCH_HOST_OS="$ARCH_HOST_OS" \
      OPT="$OPT" \
      OPT_ZIG="$OPT_ZIG" \
      BUILD_OUT="$BUILD_OUT/out" \
      BUILD_DEPS="$BUILD_DEPS" \
      BUILD_TOOLDEPS="$BUILD_TOOLDEPS" \
      BUILD_PKG="$BUILD_PKG" \
    sh -e "$script" "$@" || fail
  )

  # ok
  touch "$BUILD_OUT/.ok"
fi

# link to build/out
rm -f "$XOS_BUILD_ROOT/out"
ln -s "$BUILD_OUT/out" "$XOS_BUILD_ROOT/out"

# echo id
echo "$pkgid"
