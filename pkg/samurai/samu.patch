diff --git a/build.c b/build.c
index 7988423..dec2482 100644
--- a/build.c
+++ b/build.c
@@ -2,36 +2,27 @@
 #include <errno.h>
 #include <fcntl.h>
 #include <inttypes.h>
-#include <poll.h>
 #include <signal.h>
-#include <spawn.h>
 #include <stdbool.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <sys/wait.h>
 #include <time.h>
 #include <unistd.h>
 #include "build.h"
+#include "build_internal.h"
 #include "deps.h"
 #include "env.h"
-#include "graph.h"
 #include "log.h"
-#include "util.h"
 
-struct job {
-	struct string *cmd;
-	struct edge *edge;
-	struct buffer buf;
-	size_t next;
-	pid_t pid;
-	int fd;
-	bool failed;
-};
+#ifdef WIN32
+#define CLOCK_MONOTONIC 1
+extern int clock_gettime(int, struct timespec*);
+#endif
 
 struct buildoptions buildopts = {.maxfail = 1};
-static struct edge *work;
-static size_t nstarted, nfinished, ntotal;
-static bool consoleused;
+struct edge *work;
+size_t nstarted, nfinished, ntotal;
+bool consoleused;
 static struct timespec starttime;
 
 void
@@ -259,7 +250,7 @@ formatstatus(char *buf, size_t len)
 	return ret;
 }
 
-static void
+void
 printstatus(struct edge *e, struct string *cmd)
 {
 	struct string *description;
@@ -273,94 +264,6 @@ printstatus(struct edge *e, struct string *cmd)
 	puts(description->s);
 }
 
-static int
-jobstart(struct job *j, struct edge *e)
-{
-	extern char **environ;
-	size_t i;
-	struct node *n;
-	struct string *rspfile, *content;
-	int fd[2];
-	posix_spawn_file_actions_t actions;
-	char *argv[] = {"/bin/sh", "-c", NULL, NULL};
-
-	++nstarted;
-	for (i = 0; i < e->nout; ++i) {
-		n = e->out[i];
-		if (n->mtime == MTIME_MISSING) {
-			if (makedirs(n->path, true) < 0)
-				goto err0;
-		}
-	}
-	rspfile = edgevar(e, "rspfile", false);
-	if (rspfile) {
-		content = edgevar(e, "rspfile_content", true);
-		if (writefile(rspfile->s, content) < 0)
-			goto err0;
-	}
-
-	if (pipe(fd) < 0) {
-		warn("pipe:");
-		goto err1;
-	}
-	j->edge = e;
-	j->cmd = edgevar(e, "command", true);
-	j->fd = fd[0];
-	argv[2] = j->cmd->s;
-
-	if (!consoleused)
-		printstatus(e, j->cmd);
-
-	if ((errno = posix_spawn_file_actions_init(&actions))) {
-		warn("posix_spawn_file_actions_init:");
-		goto err2;
-	}
-	if ((errno = posix_spawn_file_actions_addclose(&actions, fd[0]))) {
-		warn("posix_spawn_file_actions_addclose:");
-		goto err3;
-	}
-	if (e->pool != &consolepool) {
-		if ((errno = posix_spawn_file_actions_addopen(&actions, 0, "/dev/null", O_RDONLY, 0))) {
-			warn("posix_spawn_file_actions_addopen:");
-			goto err3;
-		}
-		if ((errno = posix_spawn_file_actions_adddup2(&actions, fd[1], 1))) {
-			warn("posix_spawn_file_actions_adddup2:");
-			goto err3;
-		}
-		if ((errno = posix_spawn_file_actions_adddup2(&actions, fd[1], 2))) {
-			warn("posix_spawn_file_actions_adddup2:");
-			goto err3;
-		}
-		if ((errno = posix_spawn_file_actions_addclose(&actions, fd[1]))) {
-			warn("posix_spawn_file_actions_addclose:");
-			goto err3;
-		}
-	}
-	if ((errno = posix_spawn(&j->pid, argv[0], &actions, NULL, argv, environ))) {
-		warn("posix_spawn %s:", j->cmd->s);
-		goto err3;
-	}
-	posix_spawn_file_actions_destroy(&actions);
-	close(fd[1]);
-	j->failed = false;
-	if (e->pool == &consolepool)
-		consoleused = true;
-
-	return j->fd;
-
-err3:
-	posix_spawn_file_actions_destroy(&actions);
-err2:
-	close(fd[0]);
-	close(fd[1]);
-err1:
-	if (rspfile && !buildopts.keeprsp)
-		remove(rspfile->s);
-err0:
-	return -1;
-}
-
 static void
 nodedone(struct node *n, bool prune)
 {
@@ -407,7 +310,7 @@ shouldprune(struct edge *e, struct node *n, int64_t old)
 	return true;
 }
 
-static void
+void
 edgedone(struct edge *e)
 {
 	struct node *n;
@@ -436,90 +339,6 @@ edgedone(struct edge *e)
 	}
 }
 
-static void
-jobdone(struct job *j)
-{
-	int status;
-	struct edge *e, *new;
-	struct pool *p;
-
-	++nfinished;
-	if (waitpid(j->pid, &status, 0) < 0) {
-		warn("waitpid %d:", j->pid);
-		j->failed = true;
-	} else if (WIFEXITED(status)) {
-		if (WEXITSTATUS(status) != 0) {
-			warn("job failed with status %d: %s", WEXITSTATUS(status), j->cmd->s);
-			j->failed = true;
-		}
-	} else if (WIFSIGNALED(status)) {
-		warn("job terminated due to signal %d: %s", WTERMSIG(status), j->cmd->s);
-		j->failed = true;
-	} else {
-		/* cannot happen according to POSIX */
-		warn("job status unknown: %s", j->cmd->s);
-		j->failed = true;
-	}
-	close(j->fd);
-	if (j->buf.len && (!consoleused || j->failed))
-		fwrite(j->buf.data, 1, j->buf.len, stdout);
-	j->buf.len = 0;
-	e = j->edge;
-	if (e->pool) {
-		p = e->pool;
-
-		if (p == &consolepool)
-			consoleused = false;
-		/* move edge from pool queue to main work queue */
-		if (p->work) {
-			new = p->work;
-			p->work = p->work->worknext;
-			new->worknext = work;
-			work = new;
-		} else {
-			--p->numjobs;
-		}
-	}
-	if (!j->failed)
-		edgedone(e);
-}
-
-/* returns whether a job still has work to do. if not, sets j->failed */
-static bool
-jobwork(struct job *j)
-{
-	char *newdata;
-	size_t newcap;
-	ssize_t n;
-
-	if (j->buf.cap - j->buf.len < BUFSIZ / 2) {
-		newcap = j->buf.cap + BUFSIZ;
-		newdata = realloc(j->buf.data, newcap);
-		if (!newdata) {
-			warn("realloc:");
-			goto kill;
-		}
-		j->buf.cap = newcap;
-		j->buf.data = newdata;
-	}
-	n = read(j->fd, j->buf.data + j->buf.len, j->buf.cap - j->buf.len);
-	if (n > 0) {
-		j->buf.len += n;
-		return true;
-	}
-	if (n == 0)
-		goto done;
-	warn("read:");
-
-kill:
-	kill(j->pid, SIGTERM);
-	j->failed = true;
-done:
-	jobdone(j);
-
-	return false;
-}
-
 /* queries the system load average */
 static double
 queryload(void)
@@ -538,11 +357,18 @@ queryload(void)
 #endif
 }
 
+extern int poll(poller_t** pollers, size_t pollers_len, int timeout);
+extern void poller_init(poller_t**);
+extern void poller_destroy(poller_t*);
+extern bool poller_ready(poller_t*);
+extern int jobstart(struct job *j, struct edge *e, poller_t* out);
+extern bool jobwork(struct job *j);
+
 void
 build(void)
 {
 	struct job *jobs = NULL;
-	struct pollfd *fds = NULL;
+	poller_t* *pollers = NULL;
 	size_t i, next = 0, jobslen = 0, maxjobs = buildopts.maxjobs, numjobs = 0, numfail = 0;
 	struct edge *e;
 
@@ -578,18 +404,17 @@ build(void)
 				if (jobslen > buildopts.maxjobs)
 					jobslen = buildopts.maxjobs;
 				jobs = xreallocarray(jobs, jobslen, sizeof(jobs[0]));
-				fds = xreallocarray(fds, jobslen, sizeof(fds[0]));
+				pollers = xreallocarray(pollers, jobslen, sizeof(pollers[0]));
 				for (i = next; i < jobslen; ++i) {
 					jobs[i].buf.data = NULL;
 					jobs[i].buf.len = 0;
 					jobs[i].buf.cap = 0;
 					jobs[i].next = i + 1;
-					fds[i].fd = -1;
-					fds[i].events = POLLIN;
+					poller_init(&pollers[i]);
 				}
 			}
-			fds[next].fd = jobstart(&jobs[next], e);
-			if (fds[next].fd < 0) {
+			int start_rc = jobstart(&jobs[next], e, pollers[next]);
+			if (start_rc < 0) {
 				warn("job failed to start");
 				++numfail;
 			} else {
@@ -599,14 +424,15 @@ build(void)
 		}
 		if (numjobs == 0)
 			break;
-		if (poll(fds, jobslen, 5000) < 0)
+		if (poll(pollers, jobslen, 5000) < 0)
 			fatal("poll:");
 		for (i = 0; i < jobslen; ++i) {
-			if (!fds[i].revents || jobwork(&jobs[i]))
+			if (!poller_ready(pollers[i]) || jobwork(&jobs[i]))
 				continue;
 			--numjobs;
 			jobs[i].next = next;
-			fds[i].fd = -1;
+			poller_destroy(pollers[i]);
+			pollers[i] = NULL;
 			next = i;
 			if (jobs[i].failed)
 				++numfail;
@@ -615,7 +441,7 @@ build(void)
 	for (i = 0; i < jobslen; ++i)
 		free(jobs[i].buf.data);
 	free(jobs);
-	free(fds);
+	free(pollers);
 	if (numfail > 0) {
 		if (numfail < buildopts.maxfail)
 			fatal("cannot make progress due to previous errors");
diff --git a/graph.c b/graph.c
index b448e14..fa45fe4 100644
--- a/graph.c
+++ b/graph.c
@@ -100,6 +100,8 @@ https://www.illumos.org/issues/13327
 */
 #elif defined(__sun)
 		n->mtime = (int64_t)st.st_mtim.__tv_sec * 1000000000 + st.st_mtim.__tv_nsec;
+#elif defined(WIN32)
+		n->mtime = (int64_t)st.st_mtime * 1000000000;
 #else
 		n->mtime = (int64_t)st.st_mtim.tv_sec * 1000000000 + st.st_mtim.tv_nsec;
 #endif
diff --git a/scan.c b/scan.c
index 72e3fd1..4aa327d 100644
--- a/scan.c
+++ b/scan.c
@@ -8,8 +8,10 @@
 #include "scan.h"
 #include "util.h"
 
+#ifndef WIN32
 #undef getc
 #define getc getc_unlocked
+#endif
 
 struct evalstring **paths;
 size_t npaths;
diff --git a/util.c b/util.c
index 6a67065..e4036e5 100644
--- a/util.c
+++ b/util.c
@@ -9,6 +9,10 @@
 #include <sys/stat.h>
 #include "util.h"
 
+#ifdef WIN32
+#define mkdir(d, p) mkdir(d)
+#endif
+
 extern const char *argv0;
 
 static void
